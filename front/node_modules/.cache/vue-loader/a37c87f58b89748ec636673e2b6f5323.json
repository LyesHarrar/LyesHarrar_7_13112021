{"remainingRequest":"C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\src\\views\\Feed.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\src\\views\\Feed.vue","mtime":1609954819000},{"path":"C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636700259092},{"path":"C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1636700283426},{"path":"C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636700259092},{"path":"C:\\Users\\X240\\Desktop\\OpenClassrooms\\groupomania-lyes\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1636700288853}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBIb21lTmF2IGZyb20gJy4uL2NvbXBvbmVudHMvSG9tZU5hdicKaW1wb3J0IFBvc3QgZnJvbSAnLi4vY29tcG9uZW50cy9Qb3N0JwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ0ZlZWQnLAogICAgY29tcG9uZW50czogewogICAgICAgIEhvbWVOYXYsCiAgICAgICAgUG9zdAogICAgfSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcG9zdExpc3Q6IFtdLAogICAgICAgICAgICB1cGRhdGVNZXNzYWdlOiAiIiwKICAgICAgICAgICAgbW9zdFJlY2VudDogdHJ1ZSwKICAgICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICBhc2NMaXN0KCkgewogICAgICAgICAgICBsZXQgbW9zdEFuY2llbnQgPSB0aGlzLnBvc3RMaXN0LnNsaWNlKCkuc29ydCggKGEsIGIpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoYS5kYXRlU2VuZCkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYi5kYXRlU2VuZCkuZ2V0VGltZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIG1vc3RBbmNpZW50OwogICAgICAgIH0sCiAgICAgICAgZGVzY0xpc3QoKSB7CiAgICAgICAgICAgIGxldCBtb3N0UmVjZW50ID0gdGhpcy5wb3N0TGlzdC5zbGljZSgpLnNvcnQoIChhLCBiKSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGIuZGF0ZVNlbmQpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEuZGF0ZVNlbmQpLmdldFRpbWUoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBtb3N0UmVjZW50OwogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgZ2V0UG9zdHNMaXN0KCkgewogICAgICAgICAgICBsZXQgdXJsID0gYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvcG9zdGA7CiAgICAgICAgICAgIGxldCBvcHRpb25zID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidG9rZW4iKSwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgZmV0Y2godXJsLCBvcHRpb25zKQogICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKQogICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVswXSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc3RMaXN0ID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdExpc3QgPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1lc3NhZ2UgPSAiU295ZXogbGUgcHJlbWllciDDoCBwdWJsaWVyICEiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSkKICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmdldFBvc3RzTGlzdCgpOwogICAgfQp9Cg=="},{"version":3,"sources":["Feed.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Feed.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"container\">\n        <HomeNav></HomeNav>\n        <h1 id=\"forum-title\">Fil d'actualité</h1>\n        <h2 v-if=\"updateMessage.length >= 1\" class=\"alert-msg\">{{ updateMessage }}</h2>\n        <p v-if=\"postList.length >= 1\">{{ postList.length }} publication<span v-if=\"postList.length >= 2\">s</span></p>\n\n        <div v-if=\"mostRecent\" class=\"post-comment-container\">\n            <button\n                @click=\"mostRecent = false\"\n                v-if=\"postList.length >= 1\"\n                class=\"orderby-button\"\n                >Les + récentes d'abord\n                <img src=\"../assets/arrow.png\" alt=\"Flèche de tri descendante\" />\n            </button>\n            <Post\n                v-for=\"post in descList\"\n                v-bind:key=\"post.postID\"\n                :postID=\"post.postID\"\n                @post-deleted=\"getPostsList\"\n            ></Post>\n        </div>\n\n        <div v-if=\"!mostRecent\" class=\"post-comment-container\">\n            <button\n                @click=\"mostRecent = true\"\n                v-if=\"postList.length >= 1\"\n                class=\"orderby-button\"\n            >Les + anciennes d'abord\n                <img\n                    src=\"../assets/arrow.png\"\n                    alt=\"Flèche de tri ascendante\"\n                    class=\"flipped\"\n                />\n            </button>\n            <Post\n                v-for=\"post in ascList\"\n                v-bind:key=\"post.postID\"\n                :postID=\"post.postID\"\n                @post-deleted=\"getPostsList\"\n            ></Post>\n        </div>\n    </div>\n</template>\n\n<script>\nimport HomeNav from '../components/HomeNav'\nimport Post from '../components/Post'\n\nexport default {\n    name: 'Feed',\n    components: {\n        HomeNav,\n        Post\n    },\n    data() {\n        return {\n            postList: [],\n            updateMessage: \"\",\n            mostRecent: true,\n        }\n    },\n    computed: {\n        ascList() {\n            let mostAncient = this.postList.slice().sort( (a, b) => {\n              return new Date(a.dateSend).getTime() - new Date(b.dateSend).getTime();\n            });\n            return mostAncient;\n        },\n        descList() {\n            let mostRecent = this.postList.slice().sort( (a, b) => {\n              return new Date(b.dateSend).getTime() - new Date(a.dateSend).getTime();\n            });\n            return mostRecent;\n        }\n    },\n    methods: {\n        getPostsList() {\n            let url = `http://localhost:3000/api/post`;\n            let options = {\n                method: \"GET\",\n                headers: {\n                  'Authorization': 'Bearer ' + localStorage.getItem(\"token\"),\n                }\n            };\n            fetch(url, options)\n                .then(response => response.json())\n                .then((data) => {\n                    if (data[0]) {\n                        this.postList = data;\n                    }\n                    else {\n                        this.postList = data;\n                        this.updateMessage = \"Soyez le premier à publier !\";\n                    }\n                })\n              .catch(error => console.log(error))\n        }\n    },\n    mounted() {\n        this.getPostsList();\n    }\n}\n</script>\n\n<style lang=\"css\">\n@import \"../style/style.css\";\n</style>"]}]}